name: Publish Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  publish:
    name: Publish to PyPI and GitHub
    runs-on: ubuntu-latest
    # Only run if PR was merged and has 'release' label
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'release')

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(python3 -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Build distributions
        run: uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: v${{ steps.version.outputs.version }}
          files: dist/*
          generate_release_notes: true
          body: |
            ## Installation

            ```bash
            pip install mcp-pytest-runner==${{ steps.version.outputs.version }}
            ```

            Or via uvx:

            ```bash
            uvx mcp-pytest-runner
            ```

            ## Claude Code Integration

            ```bash
            claude mcp add pytest uvx mcp-pytest-runner
            ```

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
