name: Release PR

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    name: Create/Update Release PR
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if release needed
        id: check
        run: |
          # Run semantic-release in dry-run mode to check if release is needed
          OUTPUT=$(uv run semantic-release version --no-commit --no-tag --no-push --print 2>&1)
          if echo "$OUTPUT" | grep -iq "no release will be made"; then
            echo "release_needed=false" >> $GITHUB_OUTPUT
          else
            echo "release_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch and PR
        if: steps.check.outputs.release_needed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the new version from semantic-release output
          NEW_VERSION=$(uv run semantic-release version --no-commit --no-tag --no-push --print 2>/dev/null | head -1)

          if [ -z "$NEW_VERSION" ]; then
            echo "Could not determine new version, exiting"
            exit 0
          fi

          echo "New version will be: $NEW_VERSION"

          BRANCH_NAME="release-v${NEW_VERSION}"

          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Release branch $BRANCH_NAME already exists"
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git reset --hard origin/main
          else
            git checkout -b "$BRANCH_NAME"
          fi

          # Run semantic-release to update versions and changelog
          uv run semantic-release version --no-push --no-tag

          # Push the release branch
          git push -f origin "$BRANCH_NAME"

          # Create or update PR
          PR_BODY="## Automated Release PR

          This PR was automatically created by the release workflow.

          ### Changes
          - Version bump to ${NEW_VERSION}
          - Updated CHANGELOG.md with commit history

          ### Review Checklist
          - [ ] CHANGELOG.md accurately reflects changes
          - [ ] Version number is correct in pyproject.toml and __init__.py

          ### Merge Instructions
          Merge this PR to trigger the release to PyPI and GitHub releases.

          ðŸ¤– Generated by python-semantic-release"

          if gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' | grep -q .; then
            echo "PR already exists, updating..."
            gh pr edit "$BRANCH_NAME" --title "chore(release): v${NEW_VERSION}" --body "$PR_BODY"
          else
            echo "Creating new PR..."
            gh pr create \
              --title "chore(release): v${NEW_VERSION}" \
              --body "$PR_BODY" \
              --base main \
              --head "$BRANCH_NAME" \
              --label "release"
          fi
